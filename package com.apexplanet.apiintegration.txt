package com.apexplanet.apiintegration

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.*
import okhttp3.*
import org.json.JSONObject
import java.io.IOException

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            APIFetchScreen()
        }
    }
}

@Composable
fun APIFetchScreen() {
    var userData by remember { mutableStateOf("Click the button to load user data") }
    var isLoading by remember { mutableStateOf(false) }
    var error by remember { mutableStateOf<String?>(null) }

    val client = remember { OkHttpClient() }

    fun fetchUserData() {
        isLoading = true
        error = null

        val request = Request.Builder()
            .url("https://randomuser.me/api/")
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                error = "Failed to load data: ${e.message}"
                isLoading = false
            }

            override fun onResponse(call: Call, response: Response) {
                response.body?.string()?.let { body ->
                    try {
                        val json = JSONObject(body)
                        val nameObj = json.getJSONArray("results")
                            .getJSONObject(0)
                            .getJSONObject("name")
                        val firstName = nameObj.getString("first")
                        val lastName = nameObj.getString("last")

                        userData = "Random User: $firstName $lastName"
                        isLoading = false
                    } catch (e: Exception) {
                        error = "Error parsing data"
                        isLoading = false
                    }
                }
            }
        })
    }

    Surface(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier.padding(24.dp),
            verticalArrangement = Arrangement.Center
        ) {
            Text(text = userData)
            Spacer(modifier = Modifier.height(16.dp))

            Button(onClick = { fetchUserData() }) {
                Text("Fetch Random User")
            }

            if (isLoading) {
                Spacer(modifier = Modifier.height(16.dp))
                CircularProgressIndicator()
            }

            error?.let {
                Spacer(modifier = Modifier.height(16.dp))
                Text(text = it, color = MaterialTheme.colors.error)
            }
        }
    }
}
